# automatically generated by the FlatBuffers compiler, do not modify

# namespace: outech

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EncoderPositionMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEncoderPositionMsg(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EncoderPositionMsg()
        x.Init(buf, n + offset)
        return x

    # EncoderPositionMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EncoderPositionMsg
    def LeftTick(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # EncoderPositionMsg
    def RightTick(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def EncoderPositionMsgStart(builder): builder.StartObject(2)
def EncoderPositionMsgAddLeftTick(builder, leftTick): builder.PrependInt32Slot(0, leftTick, 0)
def EncoderPositionMsgAddRightTick(builder, rightTick): builder.PrependInt32Slot(1, rightTick, 0)
def EncoderPositionMsgEnd(builder): return builder.EndObject()
