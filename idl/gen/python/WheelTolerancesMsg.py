# automatically generated by the FlatBuffers compiler, do not modify

# namespace: python

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class WheelTolerancesMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsWheelTolerancesMsg(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WheelTolerancesMsg()
        x.Init(buf, n + offset)
        return x

    # WheelTolerancesMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WheelTolerancesMsg
    def TicksLeft(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # WheelTolerancesMsg
    def TicksRight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def WheelTolerancesMsgStart(builder): builder.StartObject(2)
def WheelTolerancesMsgAddTicksLeft(builder, ticksLeft): builder.PrependUint32Slot(0, ticksLeft, 0)
def WheelTolerancesMsgAddTicksRight(builder, ticksRight): builder.PrependUint32Slot(1, ticksRight, 0)
def WheelTolerancesMsgEnd(builder): return builder.EndObject()
