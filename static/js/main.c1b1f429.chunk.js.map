{"version":3,"sources":["components/Graph.js","components/DownloadLink.js","components/EncoderGraphView.js","hooks/stream.js","components/ActionsView.js","event.js","components/SimulationView.js","hooks/useFilterEvent.js","hooks/useAggregatedGraph.js","components/App.js","hooks/useDecimate.js","hooks/useDerivative.js","serviceWorker.js","index.js","plateau.svg","robot.svg"],"names":["options","pan","enabled","mode","zoom","maintainAspectRatio","animation","duration","hover","animationDuration","responsiveAnimationDuration","elements","line","tension","Graph","value","seriesName","color","graphRef","React","useRef","data","datasets","label","fill","pointStyle","borderColor","pointBorderColor","pointHoverRadius","pointHoverBorderWidth","pointRadius","pointHitRadius","showLine","borderWidth","slice","style","height","type","onClick","current","chartInstance","resetZoom","length","ref","DownloadLink","title","dataPerX","entries","i","series","point","previousValue","x","y","graph","Object","keys","map","key","parseFloat","sort","row","result","push","filename","text","element","document","createElement","setAttribute","encodeURIComponent","display","body","appendChild","click","removeChild","download","reduce","acc","join","EncoderGraphView","encoderLeft","encoderRight","speedLeft","speedRight","id","className","useEventStream","url","live","useState","event$","setEvent$","useEffect","undefined","console","log","socket","WebSocket","onopen","onmessage","msg","eventList","JSON","parse","event","fetchLive","fetchReplay","a","fetch","json","events","streamTimeOffset","time","startTime","Date","event_time","cur_time","time_to_wait","Promise","resolve","setTimeout","ActionInput","defaultValue","onChange","e","target","step","placeholder","ActionForm","args","lastArgs","onSubmit","useReducer","state","action","formState","dispatch","onSubmitForm","preventDefault","arg","htmlFor","name","ActionsView","actionURL","actions","setActions","executeAction","method","stringify","functions","fetchActions","documentation","last_args_sent","getValue","SimulationView","robotPositionEvent","robotAngleEvent","configuration","boardImageRef","robotImageRef","robotPosition","robotAngle","canvas","getElementById","getContext","ctx","globalCompositeOperation","clearRect","save","drawImage","pos","angle","robot_width","robot_height","img","posX","posY","translate","rotate","beginPath","strokeStyle","lineWidth","strokeRect","stroke","Math","PI","moveTo","lineTo","restore","drawRobot","robot_length","width","alt","src","plateauImg","robotImg","useFilterEvent","filteredEvent$","setFilteredEvent$","useAggregatedGraph","Image","useDataSeries","decimatedEvent","rate","currentValue","setCurrentValue","useDecimate","xy","useMemo","mapEventToPoint","speedXY","lastValues","delta","useDerivative","DebugInterface","to","window","location","search","path","App","urlParams","URLSearchParams","replayURL","get","liveURL","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.c1b1f429.chunk.js","sourcesContent":["import React from \"react\";\nimport {Scatter} from \"react-chartjs-2\";\n// noinspection ES6UnusedImports\nimport 'chartjs-plugin-zoom'\n\nconst options = {\n    pan: {\n        enabled: true,\n        mode: 'xy'\n    },\n    zoom: {\n        enabled: true,\n        mode: 'xy'\n    },\n    maintainAspectRatio: false,\n    animation: {\n        duration: 0 // general animation time\n    },\n    hover: {\n        animationDuration: 0 // duration of animations when hovering an item\n    },\n    responsiveAnimationDuration: 0, // animation duration after a resize\n    elements: {\n        line: {\n            tension: 0 // disables bezier curves\n        }\n    }\n}\n\n\nexport default function Graph({value, seriesName, color}) {\n    const graphRef = React.useRef();\n    const data = {\n        datasets: [\n            {\n                label: seriesName,\n                fill: false,\n                pointStyle: 'cross',\n                borderColor: color,\n                pointBorderColor: color,\n                pointHoverRadius: 20,\n                pointHoverBorderWidth: 2,\n                pointRadius: 2,\n                pointHitRadius: 10,\n                showLine: true,\n                borderWidth: 1,\n                data: value.slice(-1000),\n            }\n        ]\n    };\n\n    const onClick = () => graphRef.current.chartInstance.resetZoom()\n\n    return <div style={{height: \"100%\"}}>\n        <button type=\"button\" onClick={onClick}>reset zoom</button>\n        Number of points: {data.datasets[0].data.length}\n        <Scatter ref={graphRef} data={data} options={options} color='blue'/>\n    </div>\n}\n","import React from \"react\";\n\nfunction download(filename, text) {\n    var element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n}\n\nexport default function DownloadLink({title, data}) {\n    const onClick = () => {\n        const dataPerX = (() => {\n            let dataPerX = {}\n            for (let [i, series] of data.entries()) {\n                for (let point of series) {\n                    const previousValue = dataPerX[point.x] || {}\n                    dataPerX[point.x] = {\n                        ...previousValue,\n                        [i]: point.y,\n                    }\n                }\n            }\n            return dataPerX\n        })()\n\n        const keys = Object.keys(dataPerX).map(key => parseFloat(key)).sort()\n\n        const graph = keys.map(key => {\n            const row = dataPerX[key]\n            let result = [key]\n            for (let i = 0; i < data.length; i++) {\n                result.push(row[i])\n            }\n            return result\n        })\n        const resultCSV = [[\"time\", ...title], ...graph].reduce((acc, value) => {\n            return acc + value.join() + \"\\n\"\n        }, \"\")\n        download('graph.csv', resultCSV)\n    }\n    return <button onClick={onClick}>Download CSV</button>\n}\n","import React from \"react\";\nimport Graph from \"./Graph\";\nimport './EncoderGraphView.css';\nimport DownloadLink from \"./DownloadLink\";\n\n\nexport default function EncoderGraphView({encoderLeft, encoderRight, speedLeft, speedRight}) {\n    return (\n        <div id=\"graphContainer\">\n            <DownloadLink title={[\"encoder_left\", \"encoder_right\"]} data={[encoderLeft, encoderRight]}/>\n            <div className=\"graphRow\">\n                <div className=\"graphElement\">\n                    <Graph value={encoderLeft} seriesName='Position left' color='royalblue'/>\n                </div>\n                <div className=\"graphElement\">\n                    <Graph value={encoderRight} seriesName='Position right' color='salmon'/>\n                </div>\n            </div>\n            <div className=\"graphRow\">\n                <div className=\"graphElement\">\n                    <Graph value={speedLeft} seriesName='Speed left' color='royalblue'/>\n                </div>\n                <div className=\"graphElement\">\n                    <Graph value={speedRight} seriesName='Speed right' color='salmon'/>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import {useEffect, useState} from \"react\";\n\nexport default function useEventStream(url, live) {\n    const [event$, setEvent$] = useState()\n    useEffect(() => {\n        if (live === undefined) return\n\n        if (live) {\n            fetchLive(setEvent$, url)\n        } else {\n            fetchReplay(setEvent$, url)\n        }\n    }, [url, live])\n\n    return event$\n}\n\nfunction fetchLive(setEvent$, url) {\n    console.log(\"Opening web socket\");\n    const socket = new WebSocket(url);\n\n    socket.onopen = function () {\n        console.log(\"Opened\");\n    }\n\n    socket.onmessage = function (msg) {\n        const eventList = JSON.parse(msg.data);\n        for (let event of eventList) {\n            setEvent$(event)\n        }\n    };\n}\n\n\nasync function fetchReplay(setEvent$, url) {\n    console.log(\"Fetching remote replay\");\n    const result = await fetch(url);\n    const data = await result.json();\n    const events = data.events;\n    console.log(\"Fetched remote replay!\")\n\n    const streamTimeOffset = events[0].time\n    const startTime = new Date();\n    for (const event of data.events) {\n        const event_time = event.time - streamTimeOffset;\n        const cur_time = (new Date() - startTime) / 1000;\n        const time_to_wait = event_time - cur_time;\n        await new Promise(resolve => setTimeout(resolve, time_to_wait * 1000));\n        setEvent$(event)\n    }\n}\n\n","import React, {useEffect, useReducer, useState} from \"react\";\n\nfunction ActionInput({type, defaultValue, onChange}) {\n    if (type === \"float\" || type === \"int\") {\n        const onChangeInput = (e) => onChange(parseFloat(e.target.value))\n        return <input\n            onChange={onChangeInput}\n            type=\"number\"\n            step=\"any\"\n            defaultValue={defaultValue}\n            placeholder={type}\n        />;\n    }\n\n    const onChangeInput = (e) => onChange(e.target.value)\n    return <input\n        onChange={onChangeInput}\n        defaultValue={defaultValue}\n        type=\"text\"\n        placeholder={type}\n    />;\n}\n\nfunction ActionForm({args, lastArgs, onSubmit}) {\n    const [formState, dispatch] = useReducer((state, action) => {\n        return {...state, [action.key]: action.value}\n    }, {})\n\n    const onChange = (key) => (value) => dispatch({key: key, value: value})\n\n    const onSubmitForm = async (event) => {\n        event.preventDefault();\n        onSubmit(formState)\n    }\n\n    useEffect(() => {\n        for (let arg of Object.keys(args)) {\n            dispatch({\n                key: arg,\n                value: lastArgs[arg],\n            })\n        }\n    }, [args, lastArgs])\n    return <form onSubmit={onSubmitForm}>\n        <ul>\n            {Object.keys(args).map(arg => {\n                return (\n                    <li key={arg}>\n                        <label htmlFor={arg}>{arg}</label>:\n                        <ActionInput\n                            name={arg}\n                            type={args[arg]}\n                            onChange={onChange(arg)}\n                            defaultValue={lastArgs[arg]}\n                        />\n                    </li>\n                )\n            })}\n        </ul>\n        <input type=\"submit\"/>\n    </form>\n\n}\n\nexport default function ActionsView({actionURL}) {\n    const [actions, setActions] = useState([])\n\n    async function executeAction(name, args) {\n        console.log(\"sending action\", name, args)\n        await fetch(actionURL, {\n            method: \"POST\",\n            body: JSON.stringify({\n                name: name,\n                args: args,\n            })\n        })\n    }\n\n    useEffect(() => {\n        async function fetchActions(url) {\n            const result = await fetch(url)\n            const data = await result.json();\n            console.log(data)\n            setActions(data.functions)\n        }\n\n        fetchActions(actionURL)\n    }, [actionURL])\n\n\n    return <div>\n        <ul>\n            {actions.map((action) => {\n                const onSubmit = async (data) => {\n                    await executeAction(action.name, data)\n                }\n                return (<li key={action.name}>\n                    <ul>\n                        <li><strong>Name</strong>: {action.name}</li>\n                        <li><strong>Documentation</strong>: {action.documentation}</li>\n                        <li><strong>Arguments:</strong><ActionForm args={action.args} lastArgs={action.last_args_sent} onSubmit={onSubmit}/></li>\n                    </ul>\n                </li>);\n            })}\n        </ul>\n    </div>\n}","export function getValue(event) {\n    if (event === undefined) return undefined\n    return event.value\n}\n\nexport function mapEventToPoint(event) {\n    if (event === undefined) return\n    return {\n        x: event.time,\n        y: event.value,\n    }\n}\n","import React, {useEffect} from \"react\";\nimport './SimulationView.css'\nimport plateauImg from '../plateau.svg'\nimport robotImg from '../robot.svg'\nimport {getValue} from \"../event\";\n\n\n//\nconst WIDTH = 3000;\nconst HEIGHT = 2000;\n//\n//\n// let robot_width = 0;\n// let robot_height = 0;\n//\n// let getFrame = null;\n//\n// async function init() {\n//     const params = new URLSearchParams(window.location.search);\n//     const replayURL = params.get('replay');\n//     if (!replayURL) {\n//         return\n//     }\n//     if (replayURL.startsWith('ws://')) {\n//         let socket = new WebSocket(replayURL);\n//         let position = {\n//             \"x\": 0,\n//             \"y\": 0,\n//         }\n//         let angle = 0;\n//         socket.onmessage = function (event) {\n//             let currentFrame = JSON.parse(event.data);\n//             for (let f of currentFrame) {\n//                 if (f.key === \"position\") {\n//                     position = f.defaultValue;\n//                 }\n//                 if (f.key === \"angle\") {\n//                     angle = f.defaultValue;\n//                 }\n//             }\n//         };\n//         robot_width = 240;\n//         robot_height = 380;\n//         getFrame = function () {\n//             return {\n//                 \"position\": position,\n//                 \"angle\": angle,\n//             }\n//         }\n//     } else if (replayURL.startsWith(\"http\")) {\n//         const simulation = await loadReplay(replayURL);\n//\n//         const config = simulation.events.find(e => e.key == 'configuration').defaultValue;\n//         robot_width = config.robot_length;\n//         robot_height = config.robot_width;\n//\n//         let frames = simulation.events;\n//         let start_time = Date.now();\n//         let replay_cursor = 0;\n//         let position = {\n//             \"x\": 0,\n//             \"y\": 0,\n//         }\n//         let angle = 0;\n//         getFrame = function () {\n//             const t = Date.now() - start_time;\n//             while (replay_cursor + 1 < frames.length && t > frames[replay_cursor + 1].time * 1000) {\n//                 let f = frames[replay_cursor];\n//                 if (f.key === \"position\") {\n//                     position = f.defaultValue;\n//                 }\n//                 if (f.key === \"angle\") {\n//                     angle = f.defaultValue;\n//                 }\n//                 replay_cursor += 1;\n//             }\n//             return {\n//                 \"position\": position,\n//                 \"angle\": angle,\n//             }\n//         };\n//     } else {\n//         return\n//     }\n//     window.requestAnimationFrame(draw);\n// }\n\n// window.addEventListener('load', init);\n\n// function draw() {\n//     const robot = getFrame();\n//\n//     const canvas = document.getElementById('robotField');\n//     if (!canvas.getContext) {\n//         return;\n//     }\n//     const ctx = canvas.getContext('2d');\n//\n//     ctx.globalCompositeOperation = 'source-over';\n//     ctx.clearRect(0, 0, WIDTH, HEIGHT);\n//     ctx.save();\n//\n//     drawBackground(ctx);\n//\n//     drawGrid(ctx, robot.obstacle_grid);\n//\n//     drawRobot(ctx, robot.position, robot.angle);\n//\n//     var list_obstacles = robot['position_obstacles'];\n//\n//     if (list_obstacles !== undefined) {\n//         for (var obstacle of list_obstacles) {\n//             drawObstacle(ctx, obstacle.x, obstacle.y);\n//         }\n//     }\n//\n//     ctx.restore();\n//\n//     window.requestAnimationFrame(draw);\n// }\n//\n//\n//\n// function drawGrid(ctx, grid = []) {\n//     ctx.fillStyle = \"rgba(255, 0, 0, 0.5)\";\n//     for (var [x, row] of grid.entries()) {\n//         for (var y = 0; y < row.length; y++) {\n//             if (row[y] === '1') {\n//                 ctx.fillRect(x * 10, HEIGHT - y * 10, 10, 10);\n//             }\n//         }\n//     }\n// }\n//\nfunction drawRobot(ctx, pos, angle, robot_width, robot_height, img) {\n    if (pos === undefined) {\n        return\n    }\n    const posX = pos.x;\n    const posY = pos.y;\n    ctx.save();\n    ctx.translate(posX, HEIGHT - posY);\n    ctx.rotate(-angle);\n\n    ctx.beginPath();\n    ctx.strokeStyle = \"red\";\n    ctx.lineWidth = 4;\n    ctx.strokeRect(-robot_width / 2, -robot_height / 2, robot_width, robot_height);\n    ctx.stroke()\n\n    ctx.rotate(-Math.PI / 2);\n    ctx.drawImage(img, -robot_height / 2, -robot_width / 2, robot_height, robot_width)\n\n    ctx.beginPath();\n    ctx.strokeStyle = \"white\";\n    ctx.lineWidth = 4;\n\n    ctx.moveTo(0, -robot_width / 4);\n    ctx.lineTo(0, robot_width / 4);\n\n    ctx.lineTo(-20, robot_width / 4 - 40);\n\n    ctx.moveTo(0, robot_width / 4);\n    ctx.lineTo(20, robot_width / 4 - 40);\n\n    ctx.stroke()\n\n    ctx.restore();\n}\n\n//\n//\n// function drawObstacle(ctx, posX, posY) {\n//     ctx.save();\n//\n//     ctx.beginPath();\n//     ctx.arc(posX, HEIGHT - posY, 5, 0, 2 * Math.PI, true);\n//     ctx.fillStyle = 'red';\n//     ctx.fill();\n//\n//     ctx.strokeStyle = '#300000';\n//     ctx.stroke();\n//\n//     ctx.restore();\n// }\n//\nlet plateau = new Image();\nplateau.src = \"../plateau.svg\";\n\n\nexport default function SimulationView({robotPositionEvent, robotAngleEvent, configuration}) {\n    const boardImageRef = React.useRef()\n    const robotImageRef = React.useRef()\n\n    const robotPosition = getValue(robotPositionEvent)\n    const robotAngle = getValue(robotAngleEvent)\n\n    useEffect(() => {\n        const canvas = document.getElementById('robotField');\n        if (!canvas.getContext) {\n            return;\n        }\n        const ctx = canvas.getContext('2d');\n\n        ctx.globalCompositeOperation = 'source-over';\n        ctx.clearRect(0, 0, WIDTH, HEIGHT);\n        ctx.save();\n\n        ctx.drawImage(boardImageRef.current, 0, 0, WIDTH, HEIGHT);\n        if (configuration !== undefined) {\n            drawRobot(ctx, robotPosition, robotAngle, configuration.robot_length, configuration.robot_width, robotImageRef.current)\n        }\n        ctx.restore();\n    }, [robotPosition, robotAngle, configuration]);\n\n    return <div>\n        Robot position: {JSON.stringify(robotPosition)}\n        Robot angle: {robotAngle}\n        <canvas id=\"robotField\" width=\"3000\" height=\"2000\">\n            This page does not work, get a better (newer) browser.\n        </canvas>\n        <img alt=\"plateau\" ref={boardImageRef} src={plateauImg} style={{display: \"none\"}}/>\n        <img alt=\"robot\" ref={robotImageRef} src={robotImg} style={{display: \"none\"}}/>\n    </div>\n\n}\n","import {useEffect, useState} from \"react\";\n\nexport default function useFilterEvent(event$, key) {\n    const [filteredEvent$, setFilteredEvent$] = useState()\n    useEffect(() => {\n        if (event$ !== undefined && event$.key === key) {\n            setFilteredEvent$(event$)\n        }\n    }, [event$, key])\n\n    return filteredEvent$\n}","import {useEffect, useReducer} from \"react\";\n\nexport default function useAggregatedGraph(point) {\n    const [graph, dispatch] = useReducer((state, action) => {\n        if (action === undefined) {\n            return state\n        }\n        return [...state, action]\n    }, []);\n    useEffect(() => {\n        dispatch(point)\n    }, [point])\n\n    return graph\n}\n\n","import React, {useMemo} from \"react\";\nimport {BrowserRouter as Router, Link, Redirect, Route, Switch} from \"react-router-dom\";\nimport EncoderGraphView from \"./EncoderGraphView\";\nimport useEventStream from \"../hooks/stream\";\nimport ActionsView from \"./ActionsView\";\nimport \"./App.css\"\nimport SimulationView from \"./SimulationView\";\nimport useFilterEvent from \"../hooks/useFilterEvent\";\nimport {getValue, mapEventToPoint} from \"../event\";\nimport useDerivative from \"../hooks/useDerivative\";\nimport useAggregatedGraph from \"../hooks/useAggregatedGraph\";\nimport useDecimate from \"../hooks/useDecimate\";\n\nconst DATA_DECIMATION_RATE = 10\n\nconst useDataSeries = (event$, name) => {\n    const event = useFilterEvent(event$, name);\n    const decimatedEvent = useDecimate(event, DATA_DECIMATION_RATE)\n    const xy = useMemo(() => mapEventToPoint(decimatedEvent), [decimatedEvent])\n    const speedXY = useDerivative(xy);\n    return [useAggregatedGraph(xy), useAggregatedGraph(speedXY)]\n}\n\nfunction DebugInterface({event$, actionURL}) {\n    const configurationEvent = useFilterEvent(event$, \"configuration\")\n    const configuration = getValue(configurationEvent)\n\n    const [encoderLeft, speedLeft] = useDataSeries(event$, \"encoder_left\")\n    const [encoderRight, speedRight] = useDataSeries(event$, \"encoder_right\")\n\n    const robotPositionEvent = useFilterEvent(event$, \"position\")\n    const robotAngleEvent = useFilterEvent(event$, \"angle\")\n\n    return (\n        <Router>\n            <div>\n                <nav>\n                    <ul>\n                        <li>\n                            <Link to={\"/code/actions\" + window.location.search}>Actions</Link>\n                        </li>\n                        <li>\n                            <Link to={\"/code/encoder_graph\" + window.location.search}>Encoder graph</Link>\n                        </li>\n                        <li>\n                            <Link to={\"/code/simulation\" + window.location.search}>Simulation</Link>\n                        </li>\n                    </ul>\n                </nav>\n\n                <Switch>\n                    <Route path=\"/code/simulation\">\n                        <SimulationView\n                            robotPositionEvent={robotPositionEvent}\n                            robotAngleEvent={robotAngleEvent}\n                            configuration={configuration}\n                        />\n                    </Route>\n                    <Route path=\"/code/actions\">\n                        <ActionsView actionURL={actionURL}/>\n                    </Route>\n                    <Route path=\"/code/encoder_graph\">\n                        <EncoderGraphView\n                            encoderLeft={encoderLeft}\n                            encoderRight={encoderRight}\n                            speedLeft={speedLeft}\n                            speedRight={speedRight}\n                        />\n                    </Route>\n                    <Route path=\"/\">\n                        <Redirect to={\"/code/simulation\" + window.location.search}/>\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\n\nexport default function App() {\n    const urlParams = new URLSearchParams(window.location.search);\n    const replayURL = urlParams.get('replay');\n    const liveURL = urlParams.get('live');\n    const actionURL = urlParams.get('action');\n\n    const [url, live] = (() => {\n        if (replayURL) {\n            return [replayURL, false]\n        } else if (liveURL) {\n            return [liveURL, true]\n        } else {\n            return [undefined, undefined]\n        }\n    })()\n\n    const event$ = useEventStream(url, live)\n\n    if (!liveURL && !replayURL) {\n        return <div>Please set either \"live\" or \"replay\" in query.</div>\n    }\n\n    if (liveURL && replayURL) {\n        return <div>Cannot set both \"replay\" and \"live\" in query.</div>\n    }\n\n    return (\n        <DebugInterface event$={event$} actionURL={actionURL}/>\n    )\n}\n\n\n","import {useEffect, useState} from \"react\";\n\nexport default function useDecimate(event, rate) {\n    const [currentValue, setCurrentValue] = useState()\n    useEffect(() => {\n        if (event === undefined) {\n            return\n        }\n        if (currentValue === undefined) {\n            setCurrentValue(event)\n            return\n        }\n        if (event.time - currentValue.time > 1 / rate) {\n            setCurrentValue(event)\n        }\n    }, [event, rate, currentValue])\n    return currentValue\n}","import {useEffect, useMemo, useReducer} from \"react\";\n\nfunction delta(lastValues) {\n    if (lastValues.length <= 1) {\n        return undefined\n    }\n    const value = lastValues[lastValues.length - 1];\n    return {\n        x: value.x,\n        y: (value.y - lastValues[0].y) / (value.x - lastValues[0].x),\n    }\n}\n\nexport default function useDerivative(value) {\n    const [lastValues, dispatch] = useReducer((state, action) => {\n        if (action === undefined) {\n            return state\n        }\n        return [...state, action].slice(-2);\n    }, [])\n\n    useEffect(() => {\n        dispatch(value)\n    }, [value])\n\n    return useMemo(() => delta(lastValues), [lastValues])\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/plateau.a40c655a.svg\";","module.exports = __webpack_public_path__ + \"static/media/robot.1ba7faeb.svg\";"],"sourceRoot":""}